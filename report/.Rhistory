unlink('report_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# read train and test data
dir <- file.path("C:","Users","alpgu","Dropbox","Data Science","Bayesian Data Analysis","BDA3 (Gelman)","titanic","data")
dat.train <- read.csv(file.path(dir,"train.csv"))
dat.test <- read.csv(file.path(dir,"test.csv"))
# combine train and test data for cleaning
dat.train_without_survival <- cbind(data.frame(PassengerId=dat.train[,1]),dat.train[,3:length(colnames(dat.train))])
dat.full <- rbind(dat.train_without_survival, dat.test)
# adjustments on data set
# factorize Pclass variable
dat.full$Pclass <- as.factor(dat.full$Pclass)
# extract titles from names
dat.full$title <- str_split_fixed(as.character(str_split_fixed(dat.full$Name, ",", 2)[,2]),". ",2)[,1]
library(stringr)
library(corrplot)
library(projpred)
library(bayesplot)
library(mice)
library(VIM)
library(ggplot2)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(dplyr)
library(gridExtra)
library(brms)
library(pROC)
# read train and test data
dir <- file.path("C:","Users","alpgu","Dropbox","Data Science","Bayesian Data Analysis","BDA3 (Gelman)","titanic","data")
dat.train <- read.csv(file.path(dir,"train.csv"))
dat.test <- read.csv(file.path(dir,"test.csv"))
# combine train and test data for cleaning
dat.train_without_survival <- cbind(data.frame(PassengerId=dat.train[,1]),dat.train[,3:length(colnames(dat.train))])
dat.full <- rbind(dat.train_without_survival, dat.test)
# adjustments on data set
# factorize Pclass variable
dat.full$Pclass <- as.factor(dat.full$Pclass)
# extract titles from names
dat.full$title <- str_split_fixed(as.character(str_split_fixed(dat.full$Name, ",", 2)[,2]),". ",2)[,1]
dat.full$title <- gsub(" ", "", dat.full$title, fixed = TRUE)
dat.full$title[760] <- "Countess"
for (i in 1:length(dat.full$title)){
if(grepl("Mr|Mrs|Miss|Master",dat.full$title[i]) == F){
if(grepl("Countess|Sir|Lady|Don",dat.full$title[i]) == T){
dat.full$title[i] <- "Noble"
}
else if(grepl("Capt|Col|Major",dat.full$title[i]) == T){
dat.full$title[i] <- "Soldier"
}
else{
if(dat.full$Sex[i] == "male"){
dat.full$title[i] <- "Mr"
} else{
dat.full$title[i] <- "Miss"
}
}
}
}
dat.full$title <- as.factor(dat.full$title)
# factorize cabin variable according to letter
dat.full$Cabin <-sapply(dat.full$Cabin, function(x) substr(x,1,1))
dat.full$Cabin[dat.full$Cabin==""] <- NA
dat.full$Cabin <- as.factor(dat.full$Cabin)
# factorize embarked variable according to letter
dat.full$Embarked[dat.full$Embarked==""] <- NA
dat.full$Embarked <- as.factor(dat.full$Embarked)
# reduce factor size of ticket variable
for (i in 1:length(dat.full$Ticket)) {
if (length(strsplit(dat.full$Ticket[i], " ")[[1]]) == 2) {
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][2]
} else{
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][1]
}
}
dat.full$Ticket <- sapply(dat.full$Ticket, function(x) ifelse(nchar(x)>1,as.character(nchar(x)),x))
dat.full$Ticket <- as.factor(dat.full$Ticket)
# Create family size variable including the passenger itself
dat.full <- transform(dat.full, 'familySize' =  SibSp + Parch +1)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("SibSp","Parch"))]
dat.full$fSize <- NA
dat.full$fSize[dat.full$familySize == 1] <- 'singleton'
dat.full$fSize[dat.full$familySize <= 4 & dat.full$familySize > 1] <- 'small'
dat.full$fSize[dat.full$familySize > 4] <- 'large'
dat.full <- dat.full[ , -which(names(dat.full) %in% c("familySize"))]
dat.full$fSize <- as.factor(dat.full$fSize)
# Change sex variable to more understandable isMale variable
dat.full$isMale <- NA
dat.full$isMale[dat.full$Sex == "male"] <- 1
dat.full$isMale[dat.full$Sex <= "female"] <- 0
dat.full$isMale <- as.factor(dat.full$isMale)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Sex"))]
# Deleting the names variable
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Name"))]
dat.full.train <- data.frame(Survived = as.factor(dat.train[,2]),dat.full[1:891,])
g <- ggplot()
title_avAge <- dat.full.train %>% group_by(title) %>% summarise(n=n(),avAge = mean(Age, na.rm = T),
medAge = median(Age,na.rm=T))
p1 <- g + geom_col(data = title_avAge,aes(x=title,y=avAge),fill = "deepskyblue3")
p2 <- g + geom_col(data = title_avAge,aes(x=title,y=n),fill = "salmon3")
grid.arrange(p1,p2, ncol=2)
survtitle1 <- g + geom_bar(data = dat.full.train, aes(x=title, fill = Survived), position = "stack") + theme(axis.text.x=element_text(angle = 45, vjust = 1))
survtitle2 <- g + geom_bar(data = dat.full.train, aes(x=title, fill = Survived), position = "fill") + theme(axis.text.x=element_text(angle = 45, vjust = 1))
grid.arrange(survtitle1,survtitle2, ncol=2)
ticket_avFare <- dat.full.train %>% group_by(Ticket) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
t1 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=avFare),fill = "deepskyblue3")
t2 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=n),fill = "salmon3")
grid.arrange(t1,t2, ncol=2)
View(ticket_avFare)
survTicket1 <- g + geom_bar(data = dat.full.train, aes(x=Ticket, fill = Survived), position = "stack")
survTicket2 <- g + geom_bar(data = dat.full.train, aes(x=Ticket, fill = Survived), position = "fill")
grid.arrange(survTicket1,survTicket2, ncol=2)
View(dat.full.train)
summary(dat.full.train)
ticket_avFare <- dat.full %>% group_by(Ticket) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
t1 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=avFare),fill = "deepskyblue3")
t2 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=n),fill = "salmon3")
grid.arrange(t1,t2, ncol=2)
# read train and test data
dir <- file.path("C:","Users","alpgu","Dropbox","Data Science","Bayesian Data Analysis","BDA3 (Gelman)","titanic","data")
dat.train <- read.csv(file.path(dir,"train.csv"))
dat.test <- read.csv(file.path(dir,"test.csv"))
# combine train and test data for cleaning
dat.train_without_survival <- cbind(data.frame(PassengerId=dat.train[,1]),dat.train[,3:length(colnames(dat.train))])
dat.full <- rbind(dat.train_without_survival, dat.test)
# adjustments on data set
# factorize Pclass variable
dat.full$Pclass <- as.factor(dat.full$Pclass)
# extract titles from names
dat.full$title <- str_split_fixed(as.character(str_split_fixed(dat.full$Name, ",", 2)[,2]),". ",2)[,1]
dat.full$title <- gsub(" ", "", dat.full$title, fixed = TRUE)
dat.full$title[760] <- "Countess"
for (i in 1:length(dat.full$title)){
if(grepl("Mr|Mrs|Miss|Master",dat.full$title[i]) == F){
if(grepl("Countess|Sir|Lady|Don",dat.full$title[i]) == T){
dat.full$title[i] <- "Noble"
}
else if(grepl("Capt|Col|Major",dat.full$title[i]) == T){
dat.full$title[i] <- "Soldier"
}
else{
if(dat.full$Sex[i] == "male"){
dat.full$title[i] <- "Mr"
} else{
dat.full$title[i] <- "Miss"
}
}
}
}
dat.full$title <- as.factor(dat.full$title)
# factorize cabin variable according to letter
dat.full$Cabin <-sapply(dat.full$Cabin, function(x) substr(x,1,1))
dat.full$Cabin[dat.full$Cabin==""] <- NA
dat.full$Cabin <- as.factor(dat.full$Cabin)
# factorize embarked variable according to letter
dat.full$Embarked[dat.full$Embarked==""] <- NA
dat.full$Embarked <- as.factor(dat.full$Embarked)
# reduce factor size of ticket variable
for (i in 1:length(dat.full$Ticket)) {
if (length(strsplit(dat.full$Ticket[i], " ")[[1]]) == 2) {
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][2]
} else{
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][1]
}
}
dat.full$Ticket <- sapply(dat.full$Ticket, function(x) ifelse(nchar(x)>1,as.character(nchar(x)),x))
for (i in 1:length(dat.full$Ticket)) {
if (dat.full$Ticket[i] == '2' || dat.full$Ticket[i] == '3' || dat.full$Ticket[i] == '7'{
# read train and test data
dir <- file.path("C:","Users","alpgu","Dropbox","Data Science","Bayesian Data Analysis","BDA3 (Gelman)","titanic","data")
dat.train <- read.csv(file.path(dir,"train.csv"))
dat.test <- read.csv(file.path(dir,"test.csv"))
# combine train and test data for cleaning
dat.train_without_survival <- cbind(data.frame(PassengerId=dat.train[,1]),dat.train[,3:length(colnames(dat.train))])
dat.full <- rbind(dat.train_without_survival, dat.test)
# adjustments on data set
# factorize Pclass variable
dat.full$Pclass <- as.factor(dat.full$Pclass)
# extract titles from names
dat.full$title <- str_split_fixed(as.character(str_split_fixed(dat.full$Name, ",", 2)[,2]),". ",2)[,1]
dat.full$title <- gsub(" ", "", dat.full$title, fixed = TRUE)
dat.full$title[760] <- "Countess"
for (i in 1:length(dat.full$title)){
if(grepl("Mr|Mrs|Miss|Master",dat.full$title[i]) == F){
if(grepl("Countess|Sir|Lady|Don",dat.full$title[i]) == T){
dat.full$title[i] <- "Noble"
}
else if(grepl("Capt|Col|Major",dat.full$title[i]) == T){
dat.full$title[i] <- "Soldier"
}
else{
if(dat.full$Sex[i] == "male"){
dat.full$title[i] <- "Mr"
} else{
dat.full$title[i] <- "Miss"
}
}
}
}
dat.full$title <- as.factor(dat.full$title)
# factorize cabin variable according to letter
dat.full$Cabin <-sapply(dat.full$Cabin, function(x) substr(x,1,1))
dat.full$Cabin[dat.full$Cabin==""] <- NA
dat.full$Cabin <- as.factor(dat.full$Cabin)
# factorize embarked variable according to letter
dat.full$Embarked[dat.full$Embarked==""] <- NA
dat.full$Embarked <- as.factor(dat.full$Embarked)
# reduce factor size of ticket variable
for (i in 1:length(dat.full$Ticket)) {
if (length(strsplit(dat.full$Ticket[i], " ")[[1]]) == 2) {
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][2]
} else{
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][1]
}
}
dat.full$Ticket <- sapply(dat.full$Ticket, function(x) ifelse(nchar(x)>1,as.character(nchar(x)),x))
for (i in 1:length(dat.full$Ticket)) {
if (dat.full$Ticket[i] == '2' || dat.full$Ticket[i] == '3' || dat.full$Ticket[i] == '7'){
dat.full$Ticket[i] <- "Other"
}
}
dat.full$Ticket <- as.factor(dat.full$Ticket)
# Create family size variable including the passenger itself
dat.full <- transform(dat.full, 'familySize' =  SibSp + Parch +1)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("SibSp","Parch"))]
dat.full$fSize <- NA
dat.full$fSize[dat.full$familySize == 1] <- 'singleton'
dat.full$fSize[dat.full$familySize <= 4 & dat.full$familySize > 1] <- 'small'
dat.full$fSize[dat.full$familySize > 4] <- 'large'
dat.full <- dat.full[ , -which(names(dat.full) %in% c("familySize"))]
dat.full$fSize <- as.factor(dat.full$fSize)
# Change sex variable to more understandable isMale variable
dat.full$isMale <- NA
dat.full$isMale[dat.full$Sex == "male"] <- 1
dat.full$isMale[dat.full$Sex <= "female"] <- 0
dat.full$isMale <- as.factor(dat.full$isMale)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Sex"))]
# Deleting the names variable
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Name"))]
ticket_avFare <- dat.full.train %>% group_by(Ticket) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
t1 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=avFare),fill = "deepskyblue3")
t2 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=n),fill = "salmon3")
grid.arrange(t1,t2, ncol=2)
dat.full.train <- data.frame(Survived = as.factor(dat.train[,2]),dat.full[1:891,])
g <- ggplot()
title_avAge <- dat.full.train %>% group_by(title) %>% summarise(n=n(),avAge = mean(Age, na.rm = T),
medAge = median(Age,na.rm=T))
p1 <- g + geom_col(data = title_avAge,aes(x=title,y=avAge),fill = "deepskyblue3")
p2 <- g + geom_col(data = title_avAge,aes(x=title,y=n),fill = "salmon3")
grid.arrange(p1,p2, ncol=2)
ticket_avFare <- dat.full.train %>% group_by(Ticket) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
t1 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=avFare),fill = "deepskyblue3")
t2 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=n),fill = "salmon3")
grid.arrange(t1,t2, ncol=2)
dat.full.train <- data.frame(Survived = as.factor(dat.train[,2]),dat.full[1:891,])
g <- ggplot()
title_avAge <- dat.full.train %>% group_by(title) %>% summarise(n=n(),avAge = mean(Age, na.rm = T),
medAge = median(Age,na.rm=T))
p1 <- g + geom_col(data = title_avAge,aes(x=title,y=avAge),fill = "deepskyblue3")
p2 <- g + geom_col(data = title_avAge,aes(x=title,y=n),fill = "salmon3")
grid.arrange(p1,p2, ncol=2)
survtitle1 <- g + geom_bar(data = dat.full.train, aes(x=title, fill = Survived), position = "stack") + theme(axis.text.x=element_text(angle = 45, vjust = 1))
survtitle2 <- g + geom_bar(data = dat.full.train, aes(x=title, fill = Survived), position = "fill") + theme(axis.text.x=element_text(angle = 45, vjust = 1))
grid.arrange(survtitle1,survtitle2, ncol=2)
ticket_avFare <- dat.full.train %>% group_by(Ticket) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
t1 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=avFare),fill = "deepskyblue3")
t2 <- g + geom_col(data = ticket_avFare,aes(x=Ticket,y=n),fill = "salmon3")
grid.arrange(t1,t2, ncol=2)
survTicket1 <- g + geom_bar(data = dat.full.train, aes(x=Ticket, fill = Survived), position = "stack")
survTicket2 <- g + geom_bar(data = dat.full.train, aes(x=Ticket, fill = Survived), position = "fill")
grid.arrange(survTicket1,survTicket2, ncol=2)
Pclass_avFare <- dat.full.train %>% group_by(Pclass) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
pc1 <- g + geom_col(data = Pclass_avFare,aes(x=Pclass,y=avFare),fill = "deepskyblue3")
pc2 <- g + geom_col(data = Pclass_avFare,aes(x=Pclass,y=n),fill = "salmon3")
grid.arrange(pc1,pc2, ncol=2)
survClass1 <- g + geom_bar(data = dat.full.train, aes(x=Pclass, fill = Survived), position = "stack")
survClass2 <- g + geom_bar(data = dat.full.train, aes(x=Pclass, fill = Survived), position = "fill")
grid.arrange(survClass1,survClass2, ncol=2)
cabin_avFare <- dat.full.train %>% group_by(Cabin) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
cab1 <- g + geom_col(data = cabin_avFare,aes(x=Cabin,y=avFare),fill = "deepskyblue3")
cab2 <- g + geom_col(data = cabin_avFare,aes(x=Cabin,y=n),fill = "salmon3")
grid.arrange(cab1,cab2, ncol=2)
survCabin1 <- g + geom_bar(data = dat.full.train, aes(x=Cabin, fill = Survived), position = "stack")
survCabin2 <- g + geom_bar(data = dat.full.train, aes(x=Cabin, fill = Survived), position = "fill")
grid.arrange(survCabin1,survCabin2, ncol=2)
fSize_avFare <- dat.full.train %>% group_by(fSize) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
f1 <- g + geom_col(data = fSize_avFare,aes(x=fSize,y=avFare),fill = "deepskyblue3")
f2 <- g + geom_col(data = fSize_avFare,aes(x=fSize,y=n),fill = "salmon3")
grid.arrange(f1,f2, ncol=2)
survfSize1 <- g + geom_bar(data = dat.full.train, aes(x=fSize, fill = Survived), position = "stack")
survfSize2 <- g + geom_bar(data = dat.full.train, aes(x=fSize, fill = Survived), position = "fill")
grid.arrange(survfSize1,survfSize2, ncol=2)
embarked_avFare <- dat.full.train %>% group_by(Embarked) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
em1 <- g + geom_col(data = embarked_avFare,aes(x=Embarked,y=avFare),fill = "deepskyblue3")
em2 <- g + geom_col(data = embarked_avFare,aes(x=Embarked,y=n),fill = "salmon3")
grid.arrange(em1,em2, ncol=2)
survEmbarked1 <- g + geom_bar(data = dat.full.train, aes(x=Embarked, fill = Survived), position = "stack")
survEmbarked2 <- g + geom_bar(data = dat.full.train, aes(x=Embarked, fill = Survived), position = "fill")
grid.arrange(survEmbarked1,survEmbarked2, ncol=2)
sex_avFare <- dat.full.train %>% group_by(isMale) %>% summarise(n=n(),avFare = mean(Fare, na.rm = T))
sex1 <- g + geom_col(data = sex_avFare,aes(x=isMale,y=avFare),fill = "deepskyblue3")
sex2 <- g + geom_col(data = sex_avFare,aes(x=isMale,y=n),fill = "salmon3")
grid.arrange(sex1,sex2, ncol=2)
survSex1 <- g + geom_bar(data = dat.full.train, aes(x=isMale, fill = Survived), position = "stack")
survSex2 <- g + geom_bar(data = dat.full.train, aes(x=isMale, fill = Survived), position = "fill")
grid.arrange(survSex1,survSex2, ncol=2)
cabFsize1 <- g + geom_bar(data = dat.full.train, aes(x=Cabin, fill = fSize), position = "stack")
cabFsize2 <- g + geom_bar(data = dat.full.train, aes(x=Cabin, fill = fSize), position = "fill")
grid.arrange(cabFsize1,cabFsize2, ncol=2)
fare1 <- g + geom_histogram(data = dat.full.train, aes(Fare), color = "black", fill = "deepskyblue3")
fare2 <- g + geom_boxplot(data = dat.full.train, aes(Survived, Fare), color = "black", fill = "salmon3")
grid.arrange(fare1,fare2, ncol=2)
library(stringr)
library(corrplot)
library(projpred)
library(bayesplot)
library(mice)
library(VIM)
library(ggplot2)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(dplyr)
library(gridExtra)
library(brms)
library(pROC)
# read train and test data
dir <- file.path("C:","Users","alpgu","Dropbox","Data Science","Bayesian Data Analysis","BDA3 (Gelman)","titanic","data")
dat.train <- read.csv(file.path(dir,"train.csv"))
dat.test <- read.csv(file.path(dir,"test.csv"))
# combine train and test data for cleaning
dat.train_without_survival <- cbind(data.frame(PassengerId=dat.train[,1]),dat.train[,3:length(colnames(dat.train))])
dat.full <- rbind(dat.train_without_survival, dat.test)
# adjustments on data set
# factorize Pclass variable
dat.full$Pclass <- as.factor(dat.full$Pclass)
# extract titles from names
dat.full$title <- str_split_fixed(as.character(str_split_fixed(dat.full$Name, ",", 2)[,2]),". ",2)[,1]
dat.full$title <- gsub(" ", "", dat.full$title, fixed = TRUE)
dat.full$title[760] <- "Countess"
for (i in 1:length(dat.full$title)){
if(grepl("Mr|Mrs|Miss|Master",dat.full$title[i]) == F){
if(grepl("Countess|Sir|Lady|Don",dat.full$title[i]) == T){
dat.full$title[i] <- "Noble"
}
else if(grepl("Capt|Col|Major",dat.full$title[i]) == T){
dat.full$title[i] <- "Soldier"
}
else{
if(dat.full$Sex[i] == "male"){
dat.full$title[i] <- "Mr"
} else{
dat.full$title[i] <- "Miss"
}
}
}
}
dat.full$title <- as.factor(dat.full$title)
# factorize cabin variable according to letter
dat.full$Cabin <-sapply(dat.full$Cabin, function(x) substr(x,1,1))
dat.full$Cabin[dat.full$Cabin==""] <- NA
dat.full$Cabin <- as.factor(dat.full$Cabin)
# factorize embarked variable according to letter
dat.full$Embarked[dat.full$Embarked==""] <- NA
dat.full$Embarked <- as.factor(dat.full$Embarked)
# reduce factor size of ticket variable
for (i in 1:length(dat.full$Ticket)) {
if (length(strsplit(dat.full$Ticket[i], " ")[[1]]) == 2) {
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][2]
} else{
dat.full$Ticket[i] <- strsplit(dat.full$Ticket[i], " ")[[1]][1]
}
}
dat.full$Ticket <- sapply(dat.full$Ticket, function(x) ifelse(nchar(x)>1,as.character(nchar(x)),x))
for (i in 1:length(dat.full$Ticket)) {
if (dat.full$Ticket[i] == '2' || dat.full$Ticket[i] == '3' || dat.full$Ticket[i] == '7'){
dat.full$Ticket[i] <- "Other"
}
}
dat.full$Ticket <- as.factor(dat.full$Ticket)
# Create family size variable including the passenger itself
dat.full <- transform(dat.full, 'familySize' =  SibSp + Parch +1)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("SibSp","Parch"))]
dat.full$fSize <- NA
dat.full$fSize[dat.full$familySize == 1] <- 'singleton'
dat.full$fSize[dat.full$familySize <= 4 & dat.full$familySize > 1] <- 'small'
dat.full$fSize[dat.full$familySize > 4] <- 'large'
dat.full <- dat.full[ , -which(names(dat.full) %in% c("familySize"))]
dat.full$fSize <- as.factor(dat.full$fSize)
# Change sex variable to more understandable isMale variable
dat.full$isMale <- NA
dat.full$isMale[dat.full$Sex == "male"] <- 1
dat.full$isMale[dat.full$Sex <= "female"] <- 0
dat.full$isMale <- as.factor(dat.full$isMale)
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Sex"))]
# Deleting the names variable
dat.full <- dat.full[ , -which(names(dat.full) %in% c("Name"))]
summary(dat.full)
str(dat.full)
dat.full.train <- data.frame(Survived = as.factor(dat.train[,2]),dat.full[1:891,])
g <- ggplot()
title_avAge <- dat.full.train %>% group_by(title) %>% summarise(n=n(),avAge = mean(Age, na.rm = T),
medAge = median(Age,na.rm=T))
p1 <- g + geom_col(data = title_avAge,aes(x=title,y=avAge),fill = "deepskyblue3")
p2 <- g + geom_col(data = title_avAge,aes(x=title,y=n),fill = "salmon3")
grid.arrange(p1,p2, ncol=2)
corr(dat.full)
cor(dat.full)
cor(as.numeric(dat.full))
